<?php
class SightingException extends Exception {}

class Sighting {

    private $_id;
    private $_seaWatch;
    private $_firstSeen;
    private $_lastSeen;
    private $_species;
    private $_confidence;
    private $_groupSize;
    private $_visibility;
    private $_notes;


    public function __construct($id, $seaWatch, $firstSeen, $lastSeen, $species, $confidence, $groupSize, $visibility, $notes ){
        $this->setId($id);
        $this->setSeaWatch($seaWatch);
        $this->setStart($firstSeen);
        $this->setEnd($lastSeen);
        $this->setSeaState($species);
        $this->setSwellHeight($confidence);
        $this->setGroupSize($groupSize);
        $this->setVisibility($visibility);
        $this->setNotes($notes);
    }

    //getters
    public function getId() {
        return $this->_id ;
    }

    public function getseaWatch() {
        return $this->_seaWatch ;
    }

    public function getFirstSeen() {
        return $this->_firstSeen ;
    }

    public function getLastSeen() {
        return $this->_lastSeen ;
    }

    public function getSpecies() {
        return $this->_species ;
    }

    public function getConfidence() {
        return $this->_confidence ;
    }

    public function getGroupSize() {
        return $this->_groupSize ;
    }

    public function getVisibility() {
        return $this->_visibility ;
    }

    public function getNotes() {
        return $this->_notes ;
    }
   


    //setters
    public function setId($id) {

        if(($id !== null) && (!is_numeric($id) || $id <= 0 || $id > 9223372036854775807 || $this->_seaWatch !== null)) {
            throw new SightingException("environment ID error");
        }

        $this->_id = $id;
    }

    public function setSeaWatch($seaWatch) {

        if(($seaWatch !== null) && (!is_numeric($seaWatch) || $seaWatch <= 0 || $seaWatch > 9223372036854775807 || $this->_seaWatch !== null)) {
            throw new SightingException("seawatch error");
        }

        $this->_seaWatch = $seaWatch;
    }

    public function setStart($start) {

        if(($start !== null) && (!preg_match('/^[0-9]{2}:[0-9]{2}$', $start)  || $this->_start !== null)) {
            throw new SightingException("start time error");
        }

        $this->_start = $start;
    }

    public function setEnd($end) {

        if(($end !== null) && (!preg_match('/^[0-9]{2}:[0-9]{2}$', $end) || $this->_end !== null)) {
            throw new SightingException("end time error");
        }

        $this->_end = $end;
    }

    public function setSeaState($seaState) {

        if(($seaState !== null) && (!is_numeric($seaState) || $seaState <= 0 || $seaState > 9223372036854775807 || $this->_seaSState !== null)) {
            throw new SightingException("sea state error");
        }

        $this->_seaState = $seaState;
    }

    public function setSwellHeight($swellHeight) {

        if(($swellHeight !== null) && (!is_numeric($swellHeight) || $swellHeight <= 0 || $swellHeight > 9223372036854775807 || $this->_swellHeight !== null)) {
            throw new SightingException("swell height error");
        }

        $this->_swellHeight = $swellHeight;
    }

    public function setWindDirection($windDirection) {

        if(($windDirection !== null) && (!is_numeric($windDirection) || $windDirection <= 0 || $windDirection > 9223372036854775807 || $this->_windDirection !== null)) {
            throw new SightingException("wind direction error");
        }

        $this->_windDirection = $windDirection;
    }

    public function setVisibility($visibilty) {

        if(($visibilty !== null) && (!is_numeric($visibilty) || $visibilty <= 0 || $visibilty > 9223372036854775807 || $this->_visibilty !== null)) {
            throw new SightingException("visibility error");
        }

        $this->_visibility = $visibilty;
    }

    public function setNotes($notes) {

        if(($notes !== null) && (!is_numeric($notes) || $notes <= 0 || $notes > 9223372036854775807 || $this->_notes !== null)) {
            throw new SightingException("notes error");
        }

        $this->_notes = $notes;
    }



    public function returnSightingAsArray() {
        $sighting = array();
        $sighting['id'] = $this->getId();
        

        return $sighting;
    }


}

?>